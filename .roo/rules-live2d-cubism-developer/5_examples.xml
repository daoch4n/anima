<?xml version="1.0" encoding="UTF-8"?>
<examples>
  <example name="full_project_setup">
    <description>
      This example demonstrates the complete end-to-end workflow for setting up a new Live2D Cubism 5 project using Vite, TypeScript, and the official Web SDK. It covers project initialization, configuration, SDK placement, and implementation of the core application logic.
    </description>
    <context>
      Use this workflow when a user asks to "create a new Live2D project," "set up a basic Live2D scene," or a similar request that implies starting from a blank slate.
    </context>

    <workflow>
      <step number="1">
        <title>Initialize Vite Project</title>
        <action>Use the `execute_command` tool to scaffold a new Vite project with the `vanilla-ts` template.</action>
        <code language="bash"><![CDATA[
<execute_command>
  <command>npm create vite@latest my-live2d-app -- --template vanilla-ts</command>
</execute_command>
        ]]></code>
      </step>

      <step number="2">
        <title>Place SDK and Model Files</title>
        <action>Instruct the user (or use file system tools if available) to place the Live2D SDK into `src/lib/live2d` and the model assets into `public/models`.</action>
        <explanation>
          The Core (`.wasm`) must be in `public` to be served statically. The Framework (`.ts`) is placed in `src` to be part of the TypeScript build. Model assets are also in `public` for easy fetching.
        </explanation>
      </step>

      <step number="3">
        <title>Configure TypeScript (`tsconfig.json`)</title>
        <action>Use `apply_diff` to add the `@framework` and `@cubismcore` path aliases to `tsconfig.json`.</action>
        <code language="xml"><![CDATA[
<apply_diff>
  <path>my-live2d-app/tsconfig.json</path>
  <diff>
<<<<<< SEARCH
    "compilerOptions": {
      // ... existing options ...
      "skipLibCheck": true
    },
=======
    "compilerOptions": {
      // ... existing options ...
      "skipLibCheck": true,
      "baseUrl": ".",
      "paths": {
        "@framework/*": ["src/lib/live2d/framework/*"],
        "@cubismcore": ["public/Core/live2dcubismcore.js"]
      }
    },
>>>>>>> REPLACE
  </diff>
</apply_diff>
        ]]></code>
      </step>

      <step number="4">
        <title>Configure Vite (`vite.config.mts`)</title>
        <action>Use `apply_diff` to add the corresponding path aliases to the Vite configuration.</action>
        <code language="xml"><![CDATA[
<apply_diff>
  <path>my-live2d-app/vite.config.mts</path>
  <diff>
<<<<<< SEARCH
import { defineConfig } from 'vite'

export default defineConfig({
  // ...
})
=======
import { defineConfig } from 'vite'
import { resolve } from 'path'

export default defineConfig({
  resolve: {
    alias: {
      '@framework': resolve(__dirname, 'src/lib/live2d/framework'),
      '@cubismcore': resolve(__dirname, 'public/Core/live2dcubismcore.js'),
    }
  },
  // ...
})
>>>>>>> REPLACE
  </diff>
</apply_diff>
        ]]></code>
      </step>
      
      <step number="5">
        <title>Update `index.html`</title>
        <action>Use `apply_diff` to add the canvas element and the script tag for the Cubism Core.</action>
        <code language="xml"><![CDATA[
<apply_diff>
  <path>my-live2d-app/index.html</path>
  <diff>
<<<<<< SEARCH
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
=======
  <body>
    <canvas id="live2d-canvas" width="500" height="500"></canvas>
    <script src="/Core/live2dcubismcore.js"></script>
    <script type="module" src="/src/main.ts"></script>
  </body>
>>>>>>> REPLACE
  </diff>
</apply_diff>
        ]]></code>
      </step>

      <step number="6">
        <title>Create the `Live2DApplication` Class</title>
        <action>Use `write_to_file` to create `src/Live2DApplication.ts`, using the full template from `3_common_patterns.xml`.</action>
        <explanation>This encapsulates all Live2D logic into a reusable and maintainable class.</explanation>
      </step>

      <step number="7">
        <title>Instantiate the Application in `main.ts`</title>
        <action>Use `write_to_file` to overwrite `src/main.ts` to import and instantiate the `Live2DApplication` class.</action>
        <code language="xml"><![CDATA[
<write_to_file>
  <path>my-live2d-app/src/main.ts</path>
  <content>
import './style.css';
import { Live2DApplication } from './Live2DApplication';

const canvas = document.getElementById('live2d-canvas') as HTMLCanvasElement;

if (canvas) {
  new Live2DApplication(canvas);
} else {
  console.error('Canvas element not found.');
}
  </content>
</write_to_file>
        ]]></code>
      </step>

      <step number="8">
        <title>Final Steps</title>
        <action>Inform the user that the setup is complete and provide the commands to install dependencies and run the development server.</action>
        <code language="bash">
cd my-live2d-app
npm install
npm run dev
        </code>
      </step>
    </workflow>
  </example>
</examples>