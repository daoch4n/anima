<error_handling_guide>
  <overview>
    This guide provides instructions for diagnosing and resolving common errors encountered during Live2D Cubism development. The mode should follow these steps to provide effective troubleshooting assistance.
  </overview>

  <error_scenario name="WebGLContext_Failure">
    <symptom>
      The application throws an error like "Failed to get WebGL context" or "Browser does not support WebGL." The canvas is blank.
    </symptom>
    <diagnosis>
      <step number="1">Check the browser's WebGL support. Most modern browsers support it, but it could be disabled.</step>
      <step number="2">Verify that the canvas element exists in the DOM before the script attempts to get its context.</step>
      <step number="3">Ensure the `premultipliedAlpha: true` option is included in the `getContext` call, as it's critical for correct blending.</step>
    </diagnosis>
    <resolution>
      <action>Advise the user to ensure they are using a modern, WebGL-compatible browser.</action>
      <action>Review the `index.html` file to confirm the canvas element is present and correctly identified by its ID.</action>
      <action>Use `apply_diff` to correct the `getContext` call if `premultipliedAlpha` is missing or incorrect.</action>
      <code_example><![CDATA[
// Correct context initialization
const context = canvas.getContext('webgl', { premultipliedAlpha: true });
if (!context) {
  // Handle error gracefully
  console.error('WebGL is not supported or available.');
}
      ]]></code_example>
    </resolution>
  </error_scenario>

  <error_scenario name="CubismCore_Load_Error">
    <symptom>
      The browser console shows a 404 (Not Found) error for `live2dcubismcore.js`. The `CubismFramework.startUp()` call fails.
    </symptom>
    <diagnosis>
      <step number="1">Verify the Cubism Core SDK files are placed in the `public` directory, not `src`.</step>
      <step number="2">Check the `script` tag in `index.html`. The `src` path must be an absolute path from the project root (e.g., `/Core/live2dcubismcore.js`).</step>
      <step number="3">Ensure the script tag for the core is placed *before* the main application script (`main.ts`).</step>
    </diagnosis>
    <resolution>
      <action>Advise the user to move the `Core` directory to the `public` folder if it's in the wrong place.</action>
      <action>Use `apply_diff` to correct the `src` attribute in the `script` tag in `index.html` to use the correct absolute path.</action>
    </resolution>
  </error_scenario>

  <error_scenario name="Model_Load_Error">
    <symptom>
      The browser console shows a 404 (Not Found) error for the `.model3.json` file or any of its associated assets (`.moc3`, textures, motions).
    </symptom>
    <diagnosis>
      <step number="1">Confirm that the model's directory is located in the `public` folder.</step>
      <step number="2">Check the path passed to the `loadUserModel` function. It must be relative to the `public` directory.</step>
      <step number="3">Inspect the `.model3.json` file itself to ensure the paths to the `.moc3`, textures, and other assets are correct relative to the JSON file's location.</step>
    </diagnosis>
    <resolution>
      <action>Verify the file path in the code that triggers the model loading.</action>
      <action>Ask the user to confirm the file structure in the `public/models` directory.</action>
      <action>If necessary, use `read_file` to inspect the `.model3.json` and suggest corrections to the internal file paths.</action>
    </resolution>
  </error_scenario>

  <error_scenario name="Rendering_Artifacts_Black_Box">
    <symptom>
      The model renders with a black box around it, or transparent areas are rendered as black or have incorrect colors.
    </symptom>
    <diagnosis>
      This is almost always a premultiplied alpha issue.
      <step number="1">Confirm `premultipliedAlpha: true` was used when getting the WebGL context.</step>
      <step number="2">Check the renderer's initialization. The `CubismRenderer_WebGL` must be configured correctly.</step>
      <step number="3">Ensure the clear color of the WebGL context has an alpha of 0 if transparency is desired.</step>
    </diagnosis>
    <resolution>
      <action>Use `apply_diff` to ensure `premultipliedAlpha: true` is set in `getContext`.</action>
      <action>Review the `Live2DApplication` class to ensure the renderer is initialized and used correctly in each frame's `draw` call.</action>
      <action>Add or correct the `gl.clearColor(0.0, 0.0, 0.0, 0.0);` call at the beginning of the render loop.</action>
    </resolution>
  </error_scenario>

</error_handling_guide>