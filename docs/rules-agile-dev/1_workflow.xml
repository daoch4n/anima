<workflow_instructions>
  <mode_overview>
    This mode governs the software development process, ensuring that every implementation step strictly adheres to the approved specifications. It orchestrates the execution of tasks, reviews the code produced, and maintains alignment with `requirements.md`, `design.md`, and `tasks.md`.
  </mode_overview>

  <initialization_steps>
    <step number="1">
      <action>Identify Feature and Read Specifications</action>
      <details>
        Parse the user's request to identify the `{feature_name}`. Read the three core specification documents: `docs/specs/{feature_name}/requirements.md`, `docs/specs/{feature_name}/design.md`, and `docs/specs/{feature_name}/tasks.md`. These documents are the single source of truth for the implementation.
      </details>
      <tools>
        <tool>read_file</tool>
      </tools>
    </step>
    <step number="2">
      <action>Initialize Task Tracking</action>
      <details>
        Parse the `tasks.md` file and load the list of tasks into an internal checklist. The first task is marked as "in progress".
      </details>
    </step>
  </initialization_steps>

  <main_workflow>
    <phase name="task_execution_and_review_cycle">
      <description>
        This cycle repeats for each task in `tasks.md`. It involves delegating the task, reviewing the output, and ensuring compliance.
      </description>
      <steps>
        <step>
          <title>Delegate Research Task (If Necessary)</title>
          <action>If the task requires more context or analysis, delegate a research task.</action>
          <details>
            Before implementation, assess if the task description and specifications are sufficient. If there are ambiguities or a need for deeper investigation into the existing codebase, create a new task for the `project-research` mode. This is done via the `new_task` tool, which allows the research to happen in parallel without breaking the overseer's workflow.
          </details>
          <tools>
            <tool>new_task</tool>
          </tools>
        </step>
        <step>
          <title>Execute Task with Agentic Tool</title>
          <action>Execute the current task using the `qwen` agentic tool with a context file.</action>
          <details>
            To avoid shell syntax errors with complex prompts, first write a detailed prompt into a `CONTEXT.md` file. This file should include the specific task from `tasks.md` and all relevant context from `requirements.md` and `design.md`. Then, execute the `qwen` agent by piping the contents of `CONTEXT.md` to it. The `--yolo` flag is used to ensure the agent runs non-interactively.
          </details>
          <command>
            qwen -p "$(cat CONTEXT.md)" --yolo
          </command>
          <tools>
            <tool>write_to_file</tool>
            <tool>execute_command</tool>
          </tools>
        </step>
        <step>
          <title>Verify and Review Changes</title>
          <action>Check for changes in the working directory or the last commit, then review them against the code review checklist.</action>
          <details>
            First, check the git status. If there are changes in the working tree, review them using `git_diff_all`. If the working tree is clean, it's possible the agent committed its work directly. In that case, review the last commit by diffing against HEAD~1 using `git_diff`. This two-step verification ensures that all work is reviewed.

            During the review, you must validate the changes against all categories in the `<code_review_checklist>` found in `2_best_practices.xml`, including `specification_compliance`, `code_quality`, and the new `code_hygiene` section.
          </details>
          <tools>
            <tool>use_mcp_tool (devtools.git_status)</tool>
            <tool>use_mcp_tool (devtools.git_diff_all)</tool>
            <tool>use_mcp_tool (devtools.git_diff)</tool>
          </tools>
        </step>
        <step>
          <title>Run Type Check</title>
          <action>Run the type checker to ensure code quality.</action>
          <details>
            Before seeking user approval, run the project's type check command (`npm run type`) to catch any potential TypeScript errors. This helps ensure the code is valid and reduces the chance of introducing bugs.
          </details>
          <command>
            npm run type
          </command>
          <tools>
            <tool>execute_command</tool>
          </tools>
        </step>
        <step>
          <title>Approve, Update Task Status, and Commit</title>
          <action>Get user approval, update tasks.md, and then commit the changes.</action>
          <details>
            If the work is satisfactory, present a summary to the user and ask for explicit approval. After receiving confirmation, update the task's status to "done" in `tasks.md`. Immediately after updating the task file, commit all changes with a message that includes the task name and co-author attribution. This ensures the task status is part of the same commit as the code changes. If the work is not satisfactory, create a new sub-task for the revision and re-delegate.
          </details>
          <tools>
            <tool>ask_followup_question</tool>
            <tool>apply_diff</tool>
            <tool>use_mcp_tool (devtools.git_stage_and_commit)</tool>
          </tools>
          <commit_message>
            feat({feature_name}): {task_name}

Co-authored-by: zen-ai-roo-gemini-2.5-pro-high/qwen-coder-3-plus <219738659+roomote[bot]@users.noreply.github.com>
          </commit_message>
        </step>
        <step>
          <title>Advance to Next Task</title>
          <action>Mark the next task in the list as "in progress" and repeat the cycle.</action>
        </step>
      </steps>
    </phase>
  </main_workflow>

  <completion_criteria>
    <criterion>All tasks in `tasks.md` are marked as complete.</criterion>
    <criterion>Every implemented feature has been reviewed and verified against the specification documents.</criterion>
    <criterion>The user is informed that the implementation is complete and successful.</criterion>
  </completion_criteria>
</workflow_instructions>
