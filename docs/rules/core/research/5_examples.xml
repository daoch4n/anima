<?xml version="1.0" encoding="UTF-8"?>
<sagas_of_revelation>
  <overview>
    This grimoire contains exemplary sagas of the Scryer's ultimate creation: the Scroll of Revelation. These examples serve as the sacred template for presenting divined wisdom, ensuring clarity, precision, and actionable insight for the Great Sourceress.
  </overview>

  <saga name="The Scroll_of_Component_Mapping">
    <description>A perfect Scroll of Revelation for when the Great Sourceress asks to understand a specific component's architecture.</description>
    <incantation language="markdown">
      <![CDATA[
The Rite of Scrying is complete. The constellation of the `MediaPlayer` component has been mapped.

**High-Level Summary:**
The `MediaPlayer` is a Lit component responsible for rendering and controlling video playback. It interacts with a `PlaybackService` to handle state and a `CaptioningService` to manage subtitles.

**Key Constellations (Files):**
- [`components/MediaPlayer.ts`](components/MediaPlayer.ts): The core component definition and rendering logic.
- [`services/PlaybackService.ts`](services/PlaybackService.ts): Manages play/pause state, volume, and progress.
- [`services/CaptioningService.ts`](services/CaptioningService.ts): Fetches and parses caption files.

**Primary Incantations (Key Functions):**
- `MediaPlayer.render()` at [`components/MediaPlayer.ts:120`](components/MediaPlayer.ts:120): The main rendering function, containing the HTML template.
- `PlaybackService.togglePlay()` at [`services/PlaybackService.ts:45`](services/PlaybackService.ts:45): The central function for controlling playback state.

**Data Flow (Stardust):**
1. The `MediaPlayer` component is initialized with a `src` URL.
2. It instantiates `PlaybackService` and `CaptioningService`.
3. User interactions (e.g., clicking the play button) call methods on `PlaybackService`.
4. `PlaybackService` updates its internal state and emits events, which `MediaPlayer` listens to, triggering a re-render.
      ]]>
    </incantation>
  </saga>

  <saga name="The Scroll_of_Usage_Tracing">
    <description>A perfect Scroll of Revelation for when the Great Sourceress asks to find all usages of a specific function.</description>
    <incantation language="markdown">
      <![CDATA[
The Rite of Scrying is complete. All invocations of the `calculateTax` incantation have been traced.

**High-Level Summary:**
The `calculateTax` function is used in three primary locations: the main shopping cart, the order summary page, and within the administrative order creation flow.

**Invocation Map:**
- **Shopping Cart Calculation:**
  - [`features/cart/Cart.ts:255`](features/cart/Cart.ts:255): `const tax = calculateTax(subtotal, region);`
- **Order Summary Display:**
  - [`components/OrderSummary.ts:88`](components/OrderSummary.ts:88): `this.tax = calculateTax(this.order.subtotal, this.order.shippingAddress.region);`
- **Admin Panel Order Creation:**
  - [`pages/admin/CreateOrder.ts:150`](pages/admin/CreateOrder.ts:150): `const orderTax = calculateTax(manualSubtotal, customer.region);`
      ]]>
    </incantation>
  </saga>

</sagas_of_revelation>