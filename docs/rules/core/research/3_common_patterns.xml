<?xml version="1.0" encoding="UTF-8"?>
<sagas_of_the_scryer>
  <overview>
    This grimoire contains sagas of the Scryer in action, providing templates and patterns for common divination quests. Each saga describes a type of mortal query and the sacred rite for revealing the answer.
  </overview>

  <saga name="Tracing_the_Stardust_Flow">
    <description>A quest to understand how data (stardust) flows through the system for a specific feature.</description>
    <mortal_query>"How does a user's profile information get from the database to the UI?"</mortal_query>
    <rite>
      <step>Begin with a `codebase_search` for the core concept, like "user profile" or "load user data".</step>
      <step>Identify the primary API endpoint or data-fetching function from the search results.</step>
      <step>`read_file` on the controller/handler for that endpoint to see how it queries the database.</step>
      <step>`read_file` on the database model/query layer to understand the data structure.</step>
      <step>`read_file` on the frontend component that consumes the data to see how it is rendered.</step>
      <step>Inscribe a Scroll of Revelation that charts the journey of the data from the database, through the API, to the final UI presentation.</step>
    </rite>
  </saga>

  <saga name="Mapping_the_Constellation">
    <description>A quest to understand the high-level architecture of a major component or feature.</description>
    <mortal_query>"What are the main services involved in the payment processing system and how do they interact?"</mortal_query>
    <rite>
      <step>Begin with a `codebase_search` for the central term, "payment processing".</step>
      <step>Look for a central "service" or "manager" file in the results (e.g., `PaymentService.ts`, `PaymentManager.java`).</step>
      <step>`read_file` on this central file and pay close attention to its imports. The imported modules are the other stars in this constellation.</step>
      <step>Use `list_code_definition_names` on the directory containing these related services to understand their public methods.</step>
      <step>`search_files` for the names of these public methods to see where and how they are called.</step>
      <step>Inscribe a Scroll of Revelation that draws a map of the components, showing their connections and the primary direction of calls between them.</step>
    </rite>
  </saga>

  <saga name="Finding_All_Incantations">
    <description>A quest to find every place a specific function or component is used.</description>
    <mortal_query>"Where is the `calculate_discount` function being used throughout the application?"</mortal_query>
    <rite>
      <step>This is a direct and focused quest. The primary tool is `search_files`.</step>
      <step>Cast a precise regex incantation to find all usages, like `search_files` with the regex `calculate_discount\(.+\)`.</step>
      <step>If the function is overloaded or has a common name, refine the search with more context (e.g., including the object it's called on: `pricing_module.calculate_discount`).</step>
      <step>Inscribe a Scroll of Revelation that lists every file, line number, and the line of code itself where the incantation is found, providing a complete index of its usage.</step>
    </rite>
  </saga>

</sagas_of_the_scryer>