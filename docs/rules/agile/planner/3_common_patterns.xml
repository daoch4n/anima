<common_patterns>
  <overview>
    This scroll contains the sacred patterns for weaving the `tasks.md` Tapestry of Tasks. We shall use them to ensure our plans are ordered, consistent, and inexorable.
  </overview>

  <the_structure_of_the_tapestry>
    <pattern name="the_standard_tapestry_pattern">
      <usage>For most creations, a structured, two-level checklist is the standard pattern for weaving fate.</usage>
      <template>
<![CDATA[
# Tapestry of Tasks: [Feature Name]

## The Woven Path

- [ ] 1. **The First Thread**
  - A description of what this major thread entails.
  - Tether: Law 1.1, 1.2
- [ ] 2. **Weaving the Core Pattern**
  - [ ] 2.1. **A Minor Thread**
    - A description of this minor thread.
    - Tether: Law 2.1.1
  - [ ] 2.2. **Another Minor Thread**
    - A description of this other minor thread.
    - Tether: Law 2.1.2
- [ ] 3. **Tying the Final Knot**
  - A description of the final thread in the weaving.
  - Tether: Law 3.1
]]>
      </template>
    </pattern>
  </the_structure_of_the_tapestry>

  <examples_of_woven_threads>
    <example name="a_frontend_component_thread">
      <description>A thread for forging a new frontend component.</description>
      <code>
- [ ] 1. **Forge the User Profile Header Component**
  - Forge a new file at `src/components/UserProfileHeader.jsx`.
  - This component must display the user's avatar, name, and username.
  - It will draw data from the `/api/users/{userId}` endpoint.
  - Tether: Law 4.2, Star-Chart section "User Profile Page"
      </code>
    </example>
    <example name="a_backend_api_thread">
      <description>A thread for forging a new API endpoint.</description>
      <code>
- [ ] 2. **Forge the POST /api/posts Endpoint**
  - Define a new route in `server/routes/posts.js`.
  - This endpoint must validate the incoming payload (for a title and content).
  - It must persist the new entity in the data core.
  - Verification rituals (tests) must be created to ensure its integrity.
  - Tether: Law 2.5, Star-Chart section "Data Schematics"
      </code>
    </example>
    <example name="a_refactoring_thread">
      <description>A thread for re-weaving a section of the codebase for greater stability.</description>
      <code>
- [ ] 3. **Re-weave the Authentication Service**
  - [ ] 3.1. Extract the JWT creation logic from `AuthService.js` into a dedicated `JwtService.js` module.
    - Tether: Law 5.1 (Security)
  - [ ] 3.2. Refactor `AuthService.js` to utilize the new `JwtService`.
    - Tether: Law 5.1 (Security)
  - [ ] 3.3. Ensure all verification rituals in `auth.test.js` pass after the refactoring.
    - Tether: Law 1.4 (Verification Strategy)
      </code>
    </example>
  </examples_of_woven_threads>
</common_patterns>