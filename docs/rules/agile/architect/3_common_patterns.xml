<design_patterns>
  <overview>
    This scroll contains the sacred templates for inscribing the `design.md` star-chart. We shall use them to ensure our charts are consistent and cosmically aligned.
  </overview>

  <section_pattern name="The Cosmic Overview">
    <description>A concise, high-level summary of the feature and the divine architecture we have designed.</description>
    <template>
### 1. Cosmic Overview

This star-chart illuminates the **{Feature Name}** feature. Its purpose is to {a concise description of the user's goal}. The celestial solution we have charted involves {a summary of the technical architecture, e.g., creating a new asynchronous service, exposing a new API endpoint, extending the data core}. This design will ensure our creation is {mention its key attributes, e.g., scalable, resilient, and secure}.
    </template>
  </section_pattern>

  <section_pattern name="The Divine Architecture">
    <description>An illustration of the divine architecture, including a Mermaid diagram.</description>
    <template>
### 2. The Divine Architecture

Our cosmos adheres to the {architectural paradigm, e.g., Microservices, Event-Driven} paradigm. The primary celestial bodies are {list of main components}. The diagram below illustrates their gravitational tethers and the flow of data through their orbits.

```mermaid
graph TD
    A[User Interface] -->|Sends Request| B(API Gateway);
    B -->|Routes to| C{Core Service};
    C -->|Reads/Writes| D[(Data Core)];
    C -->|Publishes Event| E((Event Bus));
```

**The Flow of Data:**
1.  A request is initiated from the User Interface to the API Gateway.
2.  The Gateway authenticates and routes the request to the appropriate Core Service.
3.  The Core Service executes the business logic, interacting with the Data Core.
4.  Upon completion, it publishes a domain event to the Event Bus for other services to consume.
    </template>
  </section_pattern>

  <section_pattern name="The Constellations and Their Orbits">
    <description>A detailed examination of each celestial body and its gravitational tethers.</description>
    <template>
### 3. The Constellations and Their Orbits

#### 3.1. Core Service
*   **Divine Purpose:** To contain the core business logic for the {Feature Name} feature.
*   **Orbital Interface (API):**
    *   `POST /api/v1/celestial-objects`: Creates a new celestial object.
        *   **Request Payload:** `{...}`
        *   **Response Payload:** `{...}`

#### 3.2. Data Access Layer
*   **Divine Purpose:** To manage all interactions with the Data Core.
*   **Orbital Interface (Methods):**
    *   `getObjectById(id: string): Promise<Object>`
    *   `createObject(data: ObjectData): Promise<Object>`
    </template>
  </section_pattern>

  <section_pattern name="Data Schematics">
    <description>The sacred scrolls that define new or modified data structures.</description>
    <template>
### 4. Data Schematics

#### The `celestial_objects` Table
| Column        | Type          | Constraints              | Description                  |
|---------------|---------------|--------------------------|------------------------------|
| `id`          | `UUID`        | `PRIMARY KEY`            | The unique identifier.       |
| `name`        | `VARCHAR(255)`| `NOT NULL`               | The object's designation.    |
| `created_at`  | `TIMESTAMPZ`  | `NOT NULL, DEFAULT NOW()`| The moment of creation.      |
| `is_active`   | `BOOLEAN`     | `NOT NULL, DEFAULT true` | The object's active state.   |
    </template>
  </section_pattern>

  <section_pattern name="Protocols for Cosmic Anomalies">
    <description>The codex of protocols for handling cosmic anomalies with grace.</description>
    <template>
### 5. Protocols for Cosmic Anomalies

Anomalies are handled within the service layer and returned with standardized error responses.

| Status Code | Anomaly Type           | Reason                                       |
|-------------|------------------------|----------------------------------------------|
| `400`       | `Invalid Request`      | The request from the client was malformed.   |
| `404`       | `Resource Not Found`   | The requested celestial object does not exist. |
| `409`       | `Resource Conflict`    | The celestial object already exists.         |
| `500`       | `Internal Server Error`| An unexpected cosmic anomaly has occurred.   |

All anomalies will be recorded in the observational logs with a unique correlation ID to trace their origin.
    </template>
  </section_pattern>

  <section_pattern name="Strategy for Celestial Alignment">
    <description>The strategy for verifying the alignment of all celestial bodies.</description>
    <template>
### 6. Strategy for Celestial Alignment

We will verify the alignment of our cosmos through a multi-layered strategy.

*   **Stellar Core Tests (Unit Tests):** Each method within the Core Service and Data Access Layer will be tested in isolation.
*   **Constellation Tests (Integration Tests):** We will test the interaction between the Core Service and the Data Core to ensure data integrity.
*   **Cosmic Alignment Tests (E2E Tests):** We will test the entire data flow, from a request initiated at the User Interface to the data being persisted in the Data Core, to ensure the entire system is in perfect alignment.
    </template>
  </section_pattern>
</design_patterns>