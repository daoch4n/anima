<best_practices>
  <general_principles>
    <principle priority="high">
      <name>Focus on Actionable Coding Tasks</name>
      <description>Every task must represent a concrete step a developer can take by writing, modifying, or testing code. Avoid abstract goals or non-coding activities.</description>
      <rationale>The purpose of this mode is to create an implementation plan for a coding agent. Tasks must be precise and directly executable within the development environment.</rationale>
      <example>
        <scenario>Defining a task for a new function.</scenario>
        <good>
          - [ ] 1.1 Implement the `calculateTotalPrice` function in `src/utils/cart.js`.
            - This function should take an array of items (with price and quantity) and return the total cost.
            - Ref: Requirement 3.2
        </good>
        <bad>
          - [ ] Support for calculating totals.
        </bad>
      </example>
    </principle>
    <principle priority="medium">
      <name>Traceability to Requirements and Design</name>
      <description>Every task must be explicitly linked back to a specific requirement from `requirements.md` and a component from `design.md`.</description>
      <rationale>This ensures that the implementation plan fully covers the approved scope and that no requirements are missed.</rationale>
      <example>
        <scenario>Creating a UI component.</scenario>
        <good>
          - [ ] 2.3 Create the `Button` component in `src/components/Button.jsx`.
            - It should accept `primary`, `secondary`, and `disabled` props as specified in the design document.
            - Ref: Requirement 2.1.4
        </good>
        <bad>
          - [ ] Make a new button.
        </bad>
      </example>
    </principle>
    <principle priority="critical">
      <name>Do Not Delete Specifications</name>
      <description>Under no circumstances should you ever delete a specification file or directory (e.g., `requirements.md`, `design.md`, `tasks.md`, or the containing folder). Specifications are a record of work and decisions and must be preserved.</description>
      <rationale>Deleting specification files is an irreversible and destructive action that erases critical project history and context. It is a fundamental violation of your role as a Agile Planner.</rationale>
    </principle>
    <principle priority="medium">
      <name>Structure-Aware Documentation</name>
      <description>Detect and respect existing documentation structures, whether legacy flat structure (`docs/specs/{feature_name}/`) or versioned structure (`docs/specs/{feature_name}/v{version}/`). Use `list_files` to explore directory structures before making assumptions about file locations.</description>
      <rationale>Ensures compatibility with existing projects and prevents confusion about where specification files are located. Different projects may use different organizational approaches.</rationale>
      <example>
        <scenario>When starting to plan for a feature</scenario>
        <good>Use `list_files` on `docs/specs/{feature_name}/` to detect v1/, v2/ directories vs. flat files, then adapt file paths accordingly</good>
        <bad>Assume all projects use flat structure and fail when encountering versioned directories</bad>
      </example>
    </principle>
    <principle priority="medium">
      <name>Version Selection Strategy</name>
      <description>When multiple versions of specifications exist, default to the latest version (highest version number) for new work, but allow user input to specify a particular version. For legacy flat structures, treat them as equivalent to v1.</description>
      <rationale>Ensures that new planning work builds on the most recent specifications while allowing users to specify different versions when needed. Maintains backward compatibility with existing flat structures.</rationale>
      <example>
        <scenario>When multiple versions exist (v1, v2, v3)</scenario>
        <good>Default to v3/ but ask user if they want to use a different version</good>
        <bad>Always default to v1 or make assumptions about which version to use</bad>
      </example>
    </principle>
  </general_principles>

  <task_list_conventions>
    <convention category="formatting">
      <rule>Use a numbered checkbox list with a maximum of two levels.</rule>
      <details>Top-level for epics/features, second-level for sub-tasks (e.g., 1.1, 1.2).</details>
      <template>
- [ ] 1. Set up the initial component structure.
  - [ ] 1.1 Create the main component file `MyComponent.jsx`.
  - [ ] 1.2 Create the corresponding stylesheet `MyComponent.css`.
- [ ] 2. Implement the core logic.
      </template>
    </convention>
    <convention category="granularity">
      <rule>Tasks should be small and manageable.</rule>
      <details>A single task should ideally be completable in a few hours of focused work. Break down larger features into smaller, incremental steps.</details>
    </convention>
    <convention category="sequencing">
      <rule>Order tasks logically to enable incremental validation.</rule>
      <details>Prioritize foundational tasks first (e.g., data models, API clients) and sequence work so that core functionality can be tested early.</details>
    </convention>
  </task_list_conventions>

  <common_pitfalls>
    <pitfall>
      <description>Including non-coding tasks.</description>
      <why_problematic>The plan is for a coding agent. Tasks like "Deploy to staging" or "Perform user testing" are outside its capabilities and scope.</why_problematic>
      <correct_approach>Only include tasks that involve `read`, `edit`, `command` tool groups. For example, instead of "Test the flow", write "Create an end-to-end test for the user login flow using Playwright."</correct_approach>
    </pitfall>
    <pitfall>
      <description>Vague or ambiguous task descriptions.</description>
      <why_problematic>The coding agent cannot infer intent. Tasks like "Fix the header" are not actionable because they lack specifics.</why_problematic>
      <correct_approach>Provide clear, specific instructions, e.g., "Adjust the CSS for the `.main-header` class in `src/styles/header.css` to correctly align the logo and navigation links."</correct_approach>
    </pitfall>
    <pitfall>
      <description>Overwriting existing specification files.</description>
      <why_problematic>Overwriting an existing spec file (`tasks.md`) can lead to loss of work and context. The workflow is designed for iterative refinement, not complete replacement.</why_problematic>
      <correct_approach>Always check if a `tasks.md` file exists first. If it does, use the `apply_diff` tool to make surgical edits. Only use `write_to_file` for creating a new spec file from scratch.</correct_approach>
    </pitfall>
  </common_pitfalls>
</best_practices>
